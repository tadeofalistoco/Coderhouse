GIT 

GIT es un sistema de control de versiones gratuito
    -Este nos sirve para viajar en el tiempo de nuestro c√≥digo
    -Para corregir errores por ejemplo
    -Para trabajar distintas versiones de un mismo protecto en paralelo
    -Este trabaja de manera local, controlamos las verisones desde nuestra consola
    -Git-Hub trabaja estas versiones en la nube, es una red social de programadores (es como una especie de drive)


LOS 3 ESTADOS DE GIT
    -Working Directory: -Preparamos una caja para meter un producto adentro y luego cerrar la caja para enviarlo
                        -Creamos un repositorio (vacio) sujeto a cambios

usamos "git add" para pasar al staging area

    -Staging Area: -Metemos el producto dentro de la caja
                   -Subimos los archivos al repositorio

usamos "git commit" para pasar al repository

    -Repository: -Cerramos la caja, le ponemos una etiqueta para que se sepa lo que tiene adentro, y lo enviamos a donde debamos enviarlo
                 -Enviamos el repositorio a Git-Hub


COMANDOS DE GIT

CREACION DE REPOSITORIO
-Para iniciar/crear un repositorio de la carpeta donde estamos parados 
    git init 
-Para revisar que archivos tengo dentro de la carpeta y en cual de los 3 estados de Git se encuentran
    git status
-Para agregar estos archivos al repositorio uno a la vez (pasamos de Working Directory a Staging Area)
    git add nombredelarchivo
-Para agregar estos archivos al repositorio todos de una vez (pasamos de Working Directory a Staging Area)
    git add .
-Para realizar un commit, osea dejar guardada esa version del codigo (pasamos de Staging Area a Repository)
    git commit -m "mensaje descriptivo de los cambios efectuados"
-Para conectar repositorio de Git con repositorio de Git-Hub
    -git remote add origin link_del_repositorio_de_github
-Para desconectar repositorio de Git con repositorio de Git-Hub 
    -git remote remove origin
-Para enviar los commit al repositorio de Git-Hub 
    -git push -u origin nombre_de_la_branch (en este caso la master)
-Para enviar los commit al repositorio de Git-Hub (ya estando conectada la branch)
    -git push

OTRAS ACCIONES
-Para saber la version
    git --version
-Actualizar version de Git
    git update-git-for-windows
-Configurar nombre de usuario
    git config --global user.name "Tadeo Falistoco"
-Configurar email
    git config --global user.email ttadeofalistoco@gmail.com
-Verificar nombre
    git config user.name
-Verificar email
    git config user.email
-Limpiar la pantalla de la consola
    clear
-Para movernos entre especificidad de carpetas (mas especifico)
    cd carpeta 
-Tambien podemos arrastrar la carpeta que queremos abrir a la consola
    cd (carpeta arrastrada)
-Para movernos entre especificidad de carpetas (menos especifico)
    cd ..
-Para saber que carpetas/archivos se encuentran dentro del nivel que estoy (algunas pueden aparecer en un idioma distinto, ingles)
    ls 
-Luego de hacer cambios en alguno de los archivos que ya tenemos commiteados, podemos guardarlos con add o podemos descartar los cambios 
    git restore (y luego se hace otro commit)
-Para mostrar todas las branch que hay de nuestro proyecto
    git branch
-Para crear una branch nueva
    git branch nombre-de-la-rama
-Para cambiarnos de branch (ya con esto es que podemos trabajar varias versiones en paralelo)
    git checkout
-Para que la branch master tenga los cambios de alguna de las demas versiones (osea que otra version se convierta en la master)
    git merge nombre-de-la-rama
-Para borrar una branch 
    git branch -d nombre-de-la-rama-que-queremos-borrar
-Para ver listado de los commit
    git log 
-Para ver listado de los commit resumido (del ultimo al primero)
    git log --oneline
-Para moverme entre commits pasados (con esto no se recupera) (para ello conviene crear una branch nueva y traer el commit ahi)
    git checkout codigo-del-commit